{"ast":null,"code":"var _jsxFileName = \"C:\\\\bulhi\\\\#work\\\\downloadFileServer\\\\client\\\\src\\\\pages\\\\UploadPage.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useHttp } from '../hooks/http.hooks';\nimport modalInfo from '../modules/toast/main';\nimport './UploadPage.css';\n\nfunction UploadPage() {\n  const {\n    loading,\n    error,\n    request,\n    clearError\n  } = useHttp();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n\n  const selectFile = event => {\n    console.log(event.target.files);\n    setSelectedFiles(event.target.files);\n  };\n\n  useEffect(() => {\n    modalInfo(error);\n    clearError(null);\n    var control = document.getElementById(\"your-files\");\n    control.addEventListener(\"change\", function (event) {\n      // Когда происходит изменение элементов управления, значит появились новые файлы\n      var i = 0,\n          files = control.files,\n          len = files.length;\n\n      for (; i < len; i++) {\n        console.log(\"Filename: \" + files[i].name);\n        console.log(\"Type: \" + files[i].type);\n        console.log(\"Size: \" + files[i].size + \" bytes\");\n      }\n    }, false);\n    var target = document.getElementById(\"your-files\");\n    target.addEventListener(\"dragover\", function (event) {\n      event.preventDefault(); // отменяем действие по умолчанию\n    }, false);\n    target.addEventListener(\"drop\", function (event) {\n      // отменяем действие по умолчанию\n      event.preventDefault();\n      var i = 0,\n          files = event.dataTransfer.files,\n          len = files.length;\n\n      for (; i < len; i++) {\n        console.log(\"Filename: \" + files[i].name);\n        console.log(\"Type: \" + files[i].type);\n        console.log(\"Size: \" + files[i].size + \" bytes\");\n      }\n    }, false);\n    var form = new FormData();\n    form.append(\"name\", \"Николай\"); // Создаем форму с несколькими значениями\n\n    var form = new FormData();\n    form.append(\"name\", \"Николай\");\n    form.append(\"photo\", control.files[0]); // отправляем через xhr\n\n    var xhr = new XMLHttpRequest();\n\n    xhr.onload = function () {\n      console.log(\"Отправка завершена\");\n    };\n\n    xhr.open(\"post\", \"/entrypoint\", true);\n    xhr.send(form);\n  }, [error, clearError]);\n\n  async function uploadSubmit(e) {\n    e.preventDefault(); // console.log(selectedFiles[0])\n\n    const info = {\n      name: selectedFiles[0].name,\n      lastModified: selectedFiles[0].lastModified,\n      size: selectedFiles[0].size,\n      type: selectedFiles[0].type\n    };\n\n    try {\n      const data = await request('/api/file/test', 'POST', info, {\n        'Content-Type': 'multipart/form-data'\n      });\n      console.log(data);\n    } catch (error) {}\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: uploadSubmit,\n    id: \"upload-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    id: \"your-files\",\n    multiple: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"your-files\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    name: \"file\",\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, \"\\u041E\\u0431\\u0440\\u0430\\u0431\\u043E\\u0442\\u0430\\u0442\\u044C\"));\n}\n\nexport default UploadPage;","map":{"version":3,"sources":["C:/bulhi/#work/downloadFileServer/client/src/pages/UploadPage.js"],"names":["React","useEffect","useState","useHttp","modalInfo","UploadPage","loading","error","request","clearError","selectedFiles","setSelectedFiles","selectFile","event","console","log","target","files","control","document","getElementById","addEventListener","i","len","length","name","type","size","preventDefault","dataTransfer","form","FormData","append","xhr","XMLHttpRequest","onload","open","send","uploadSubmit","e","info","lastModified","data"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useHttp } from '../hooks/http.hooks'\r\nimport modalInfo from '../modules/toast/main'\r\nimport './UploadPage.css'\r\n\r\n\r\n\r\nfunction UploadPage() {\r\n    const { loading, error, request, clearError } = useHttp()\r\n\r\n    const [selectedFiles, setSelectedFiles] = useState([])\r\n\r\n    const selectFile = (event) => {\r\n        console.log(event.target.files)\r\n        setSelectedFiles(event.target.files)\r\n    }\r\n\r\n    useEffect(() => {\r\n        modalInfo(error)\r\n        clearError(null)\r\n\r\n        var control = document.getElementById(\"your-files\");\r\n        control.addEventListener(\"change\", function (event) {\r\n            // Когда происходит изменение элементов управления, значит появились новые файлы\r\n            var i = 0,\r\n                files = control.files,\r\n                len = files.length;\r\n\r\n            for (; i < len; i++) {\r\n                console.log(\"Filename: \" + files[i].name);\r\n                console.log(\"Type: \" + files[i].type);\r\n                console.log(\"Size: \" + files[i].size + \" bytes\");\r\n            }\r\n\r\n        }, false);\r\n\r\n        var target = document.getElementById(\"your-files\");\r\n        target.addEventListener(\"dragover\", function (event) {\r\n            event.preventDefault(); // отменяем действие по умолчанию\r\n        }, false);\r\n        target.addEventListener(\"drop\", function (event) {\r\n            // отменяем действие по умолчанию\r\n            event.preventDefault();\r\n            var i = 0,\r\n                files = event.dataTransfer.files,\r\n                len = files.length;\r\n            for (; i < len; i++) {\r\n                console.log(\"Filename: \" + files[i].name);\r\n                console.log(\"Type: \" + files[i].type);\r\n                console.log(\"Size: \" + files[i].size + \" bytes\");\r\n            }\r\n        }, false);\r\n\r\n        var form = new FormData();\r\nform.append(\"name\", \"Николай\");\r\n\r\n// Создаем форму с несколькими значениями\r\nvar form = new FormData();\r\nform.append(\"name\", \"Николай\");\r\nform.append(\"photo\", control.files[0]);\r\n \r\n// отправляем через xhr\r\nvar xhr = new XMLHttpRequest();\r\nxhr.onload = function() {\r\n    console.log(\"Отправка завершена\");\r\n};\r\nxhr.open(\"post\", \"/entrypoint\", true);\r\nxhr.send(form);\r\n\r\n    }, [error, clearError])\r\n\r\n\r\n    async function uploadSubmit(e) {\r\n        e.preventDefault()\r\n        // console.log(selectedFiles[0])\r\n        const info = {\r\n            name: selectedFiles[0].name,\r\n            lastModified: selectedFiles[0].lastModified,\r\n            size: selectedFiles[0].size,\r\n            type: selectedFiles[0].type\r\n        }\r\n        try {\r\n            const data = await request('/api/file/test', 'POST', info, { 'Content-Type': 'multipart/form-data' })\r\n            console.log(data)\r\n        } catch (error) { }\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={uploadSubmit} id=\"upload-container\" >\r\n            <input type=\"file\" id=\"your-files\" multiple />\r\n            <br />\r\n            <div id=\"your-files\"></div>\r\n            <button type=\"submit\" name=\"file\" disabled={loading}>Обработать</button>\r\n\r\n        </form>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default UploadPage"]},"metadata":{},"sourceType":"module"}