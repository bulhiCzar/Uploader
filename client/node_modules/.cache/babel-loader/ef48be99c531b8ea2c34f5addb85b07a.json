{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidatorsImpl = void 0;\n\nconst validator = require(\"validator\");\n\nconst context_items_1 = require(\"../context-items\");\n\nclass ValidatorsImpl {\n  constructor(builder, chain) {\n    this.builder = builder;\n    this.chain = chain;\n    this.negateNext = false;\n  }\n\n  addItem(item) {\n    this.builder.addItem(item);\n    this.lastValidator = item; // Reset this.negateNext so that next validation isn't negated too\n\n    this.negateNext = false;\n    return this.chain;\n  } // validation manipulation\n\n\n  not() {\n    this.negateNext = true;\n    return this.chain;\n  }\n\n  withMessage(message) {\n    this.lastValidator.message = message;\n    return this.chain;\n  } // custom validators\n\n\n  custom(validator) {\n    return this.addItem(new context_items_1.CustomValidation(validator, this.negateNext));\n  }\n\n  exists(options = {}) {\n    let validator;\n\n    if (options.checkFalsy) {\n      validator = value => !!value;\n    } else if (options.checkNull) {\n      validator = value => value != null;\n    } else {\n      validator = value => value !== undefined;\n    }\n\n    return this.custom(validator);\n  }\n\n  isArray(options = {}) {\n    return this.custom(value => Array.isArray(value) && (typeof options.min === 'undefined' || value.length >= options.min) && (typeof options.max === 'undefined' || value.length <= options.max));\n  }\n\n  isString() {\n    return this.custom(value => typeof value === 'string');\n  }\n\n  notEmpty(options) {\n    this.not();\n    return this.isEmpty(options);\n  } // Standard validators\n\n\n  addStandardValidation(validator, ...options) {\n    return this.addItem(new context_items_1.StandardValidation(validator, this.negateNext, options));\n  }\n\n  contains(elem, options) {\n    return this.addStandardValidation(validator.contains, elem, options);\n  }\n\n  equals(comparison) {\n    return this.addStandardValidation(validator.equals, comparison);\n  }\n\n  isAfter(date) {\n    return this.addStandardValidation(validator.isAfter, date);\n  }\n\n  isAlpha(locale) {\n    return this.addStandardValidation(validator.isAlpha, locale);\n  }\n\n  isAlphanumeric(locale) {\n    return this.addStandardValidation(validator.isAlphanumeric, locale);\n  }\n\n  isAscii() {\n    return this.addStandardValidation(validator.isAscii);\n  }\n\n  isBase32() {\n    return this.addStandardValidation(validator.isBase32);\n  }\n\n  isBase64(options) {\n    return this.addStandardValidation(validator.isBase64, options);\n  }\n\n  isBefore(date) {\n    return this.addStandardValidation(validator.isBefore, date);\n  }\n\n  isBIC() {\n    return this.addStandardValidation(validator.isBIC);\n  }\n\n  isBoolean() {\n    return this.addStandardValidation(validator.isBoolean);\n  }\n\n  isBtcAddress() {\n    return this.addStandardValidation(validator.isBtcAddress);\n  }\n\n  isByteLength(options) {\n    return this.addStandardValidation(validator.isByteLength, options);\n  }\n\n  isCreditCard() {\n    return this.addStandardValidation(validator.isCreditCard);\n  }\n\n  isCurrency(options) {\n    return this.addStandardValidation(validator.isCurrency, options);\n  }\n\n  isDataURI() {\n    return this.addStandardValidation(validator.isDataURI);\n  }\n\n  isDate() {\n    return this.addStandardValidation(validator.isDate);\n  }\n\n  isDecimal(options) {\n    return this.addStandardValidation(validator.isDecimal, options);\n  }\n\n  isDivisibleBy(number) {\n    return this.addStandardValidation(validator.isDivisibleBy, number);\n  }\n\n  isEAN() {\n    return this.addStandardValidation(validator.isEAN);\n  }\n\n  isEmail(options) {\n    return this.addStandardValidation(validator.isEmail, options);\n  }\n\n  isEmpty(options) {\n    return this.addStandardValidation(validator.isEmpty, options);\n  }\n\n  isEthereumAddress() {\n    return this.addStandardValidation(validator.isEthereumAddress);\n  }\n\n  isFQDN(options) {\n    return this.addStandardValidation(validator.isFQDN, options);\n  }\n\n  isFloat(options) {\n    return this.addStandardValidation(validator.isFloat, options);\n  }\n\n  isFullWidth() {\n    return this.addStandardValidation(validator.isFullWidth);\n  }\n\n  isHalfWidth() {\n    return this.addStandardValidation(validator.isHalfWidth);\n  }\n\n  isHash(algorithm) {\n    return this.addStandardValidation(validator.isHash, algorithm);\n  }\n\n  isHexColor() {\n    return this.addStandardValidation(validator.isHexColor);\n  }\n\n  isHexadecimal() {\n    return this.addStandardValidation(validator.isHexadecimal);\n  }\n\n  isHSL() {\n    return this.addStandardValidation(validator.isHSL);\n  }\n\n  isIBAN() {\n    return this.addStandardValidation(validator.isIBAN);\n  }\n\n  isIdentityCard(locale) {\n    return this.addStandardValidation(validator.isIdentityCard, locale);\n  }\n\n  isIMEI(options) {\n    return this.addStandardValidation(validator.isIMEI, options);\n  }\n\n  isIP(version) {\n    return this.addStandardValidation(validator.isIP, version);\n  }\n\n  isIPRange() {\n    return this.addStandardValidation(validator.isIPRange);\n  }\n\n  isISBN(version) {\n    return this.addStandardValidation(validator.isISBN, version);\n  }\n\n  isISSN(options) {\n    return this.addStandardValidation(validator.isISSN, options);\n  }\n\n  isISIN() {\n    return this.addStandardValidation(validator.isISIN);\n  }\n\n  isISO8601(options) {\n    return this.addStandardValidation(validator.isISO8601, options);\n  }\n\n  isISO31661Alpha2() {\n    return this.addStandardValidation(validator.isISO31661Alpha2);\n  }\n\n  isISO31661Alpha3() {\n    return this.addStandardValidation(validator.isISO31661Alpha3);\n  }\n\n  isISRC() {\n    return this.addStandardValidation(validator.isISRC);\n  }\n\n  isIn(values) {\n    return this.addStandardValidation(validator.isIn, values);\n  }\n\n  isInt(options) {\n    return this.addStandardValidation(validator.isInt, options);\n  }\n\n  isJSON(options) {\n    return this.addStandardValidation(validator.isJSON, options);\n  }\n\n  isJWT() {\n    return this.addStandardValidation(validator.isJWT);\n  }\n\n  isLatLong(options) {\n    return this.addStandardValidation(validator.isLatLong, options);\n  }\n\n  isLength(options) {\n    return this.addStandardValidation(validator.isLength, options);\n  }\n\n  isLocale() {\n    return this.addStandardValidation(validator.isLocale);\n  }\n\n  isLowercase() {\n    return this.addStandardValidation(validator.isLowercase);\n  }\n\n  isMagnetURI() {\n    return this.addStandardValidation(validator.isMagnetURI);\n  }\n\n  isMACAddress(options) {\n    return this.addStandardValidation(validator.isMACAddress, options);\n  }\n\n  isMD5() {\n    return this.addStandardValidation(validator.isMD5);\n  }\n\n  isMimeType() {\n    return this.addStandardValidation(validator.isMimeType);\n  }\n\n  isMobilePhone(locale, options) {\n    return this.addStandardValidation(validator.isMobilePhone, locale, options);\n  }\n\n  isMongoId() {\n    return this.addStandardValidation(validator.isMongoId);\n  }\n\n  isMultibyte() {\n    return this.addStandardValidation(validator.isMultibyte);\n  }\n\n  isNumeric(options) {\n    return this.addStandardValidation(validator.isNumeric, options);\n  }\n\n  isOctal() {\n    return this.addStandardValidation(validator.isOctal);\n  }\n\n  isPassportNumber(countryCode) {\n    return this.addStandardValidation(validator.isPassportNumber, countryCode);\n  }\n\n  isPort() {\n    return this.addStandardValidation(validator.isPort);\n  }\n\n  isPostalCode(locale) {\n    return this.addStandardValidation(validator.isPostalCode, locale);\n  }\n\n  isRFC3339() {\n    return this.addStandardValidation(validator.isRFC3339);\n  }\n\n  isRgbColor(includePercentValues) {\n    return this.addStandardValidation(validator.isRgbColor, includePercentValues);\n  }\n\n  isSemVer() {\n    return this.addStandardValidation(validator.isSemVer);\n  }\n\n  isSlug() {\n    return this.addStandardValidation(validator.isSlug);\n  }\n\n  isSurrogatePair() {\n    return this.addStandardValidation(validator.isSurrogatePair);\n  }\n\n  isTaxID(locale) {\n    return this.addStandardValidation(validator.isTaxID, locale);\n  }\n\n  isURL(options) {\n    return this.addStandardValidation(validator.isURL, options);\n  }\n\n  isUUID(version) {\n    return this.addStandardValidation(validator.isUUID, version);\n  }\n\n  isUppercase() {\n    return this.addStandardValidation(validator.isUppercase);\n  }\n\n  isVariableWidth() {\n    return this.addStandardValidation(validator.isVariableWidth);\n  }\n\n  isWhitelisted(chars) {\n    return this.addStandardValidation(validator.isWhitelisted, chars);\n  }\n\n  matches(pattern, modifiers) {\n    return this.addStandardValidation(validator.matches, pattern, modifiers);\n  }\n\n}\n\nexports.ValidatorsImpl = ValidatorsImpl;","map":{"version":3,"sources":["C:/bulhi/#work/downloadFileServer/node_modules/express-validator/src/chain/validators-impl.js"],"names":["Object","defineProperty","exports","value","ValidatorsImpl","validator","require","context_items_1","constructor","builder","chain","negateNext","addItem","item","lastValidator","not","withMessage","message","custom","CustomValidation","exists","options","checkFalsy","checkNull","undefined","isArray","Array","min","length","max","isString","notEmpty","isEmpty","addStandardValidation","StandardValidation","contains","elem","equals","comparison","isAfter","date","isAlpha","locale","isAlphanumeric","isAscii","isBase32","isBase64","isBefore","isBIC","isBoolean","isBtcAddress","isByteLength","isCreditCard","isCurrency","isDataURI","isDate","isDecimal","isDivisibleBy","number","isEAN","isEmail","isEthereumAddress","isFQDN","isFloat","isFullWidth","isHalfWidth","isHash","algorithm","isHexColor","isHexadecimal","isHSL","isIBAN","isIdentityCard","isIMEI","isIP","version","isIPRange","isISBN","isISSN","isISIN","isISO8601","isISO31661Alpha2","isISO31661Alpha3","isISRC","isIn","values","isInt","isJSON","isJWT","isLatLong","isLength","isLocale","isLowercase","isMagnetURI","isMACAddress","isMD5","isMimeType","isMobilePhone","isMongoId","isMultibyte","isNumeric","isOctal","isPassportNumber","countryCode","isPort","isPostalCode","isRFC3339","isRgbColor","includePercentValues","isSemVer","isSlug","isSurrogatePair","isTaxID","isURL","isUUID","isUppercase","isVariableWidth","isWhitelisted","chars","matches","pattern","modifiers"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValidatorsImpl = void 0;\nconst validator = require(\"validator\");\nconst context_items_1 = require(\"../context-items\");\nclass ValidatorsImpl {\n    constructor(builder, chain) {\n        this.builder = builder;\n        this.chain = chain;\n        this.negateNext = false;\n    }\n    addItem(item) {\n        this.builder.addItem(item);\n        this.lastValidator = item;\n        // Reset this.negateNext so that next validation isn't negated too\n        this.negateNext = false;\n        return this.chain;\n    }\n    // validation manipulation\n    not() {\n        this.negateNext = true;\n        return this.chain;\n    }\n    withMessage(message) {\n        this.lastValidator.message = message;\n        return this.chain;\n    }\n    // custom validators\n    custom(validator) {\n        return this.addItem(new context_items_1.CustomValidation(validator, this.negateNext));\n    }\n    exists(options = {}) {\n        let validator;\n        if (options.checkFalsy) {\n            validator = value => !!value;\n        }\n        else if (options.checkNull) {\n            validator = value => value != null;\n        }\n        else {\n            validator = value => value !== undefined;\n        }\n        return this.custom(validator);\n    }\n    isArray(options = {}) {\n        return this.custom(value => Array.isArray(value) &&\n            (typeof options.min === 'undefined' || value.length >= options.min) &&\n            (typeof options.max === 'undefined' || value.length <= options.max));\n    }\n    isString() {\n        return this.custom(value => typeof value === 'string');\n    }\n    notEmpty(options) {\n        this.not();\n        return this.isEmpty(options);\n    }\n    // Standard validators\n    addStandardValidation(validator, ...options) {\n        return this.addItem(new context_items_1.StandardValidation(validator, this.negateNext, options));\n    }\n    contains(elem, options) {\n        return this.addStandardValidation(validator.contains, elem, options);\n    }\n    equals(comparison) {\n        return this.addStandardValidation(validator.equals, comparison);\n    }\n    isAfter(date) {\n        return this.addStandardValidation(validator.isAfter, date);\n    }\n    isAlpha(locale) {\n        return this.addStandardValidation(validator.isAlpha, locale);\n    }\n    isAlphanumeric(locale) {\n        return this.addStandardValidation(validator.isAlphanumeric, locale);\n    }\n    isAscii() {\n        return this.addStandardValidation(validator.isAscii);\n    }\n    isBase32() {\n        return this.addStandardValidation(validator.isBase32);\n    }\n    isBase64(options) {\n        return this.addStandardValidation(validator.isBase64, options);\n    }\n    isBefore(date) {\n        return this.addStandardValidation(validator.isBefore, date);\n    }\n    isBIC() {\n        return this.addStandardValidation(validator.isBIC);\n    }\n    isBoolean() {\n        return this.addStandardValidation(validator.isBoolean);\n    }\n    isBtcAddress() {\n        return this.addStandardValidation(validator.isBtcAddress);\n    }\n    isByteLength(options) {\n        return this.addStandardValidation(validator.isByteLength, options);\n    }\n    isCreditCard() {\n        return this.addStandardValidation(validator.isCreditCard);\n    }\n    isCurrency(options) {\n        return this.addStandardValidation(validator.isCurrency, options);\n    }\n    isDataURI() {\n        return this.addStandardValidation(validator.isDataURI);\n    }\n    isDate() {\n        return this.addStandardValidation(validator.isDate);\n    }\n    isDecimal(options) {\n        return this.addStandardValidation(validator.isDecimal, options);\n    }\n    isDivisibleBy(number) {\n        return this.addStandardValidation(validator.isDivisibleBy, number);\n    }\n    isEAN() {\n        return this.addStandardValidation(validator.isEAN);\n    }\n    isEmail(options) {\n        return this.addStandardValidation(validator.isEmail, options);\n    }\n    isEmpty(options) {\n        return this.addStandardValidation(validator.isEmpty, options);\n    }\n    isEthereumAddress() {\n        return this.addStandardValidation(validator.isEthereumAddress);\n    }\n    isFQDN(options) {\n        return this.addStandardValidation(validator.isFQDN, options);\n    }\n    isFloat(options) {\n        return this.addStandardValidation(validator.isFloat, options);\n    }\n    isFullWidth() {\n        return this.addStandardValidation(validator.isFullWidth);\n    }\n    isHalfWidth() {\n        return this.addStandardValidation(validator.isHalfWidth);\n    }\n    isHash(algorithm) {\n        return this.addStandardValidation(validator.isHash, algorithm);\n    }\n    isHexColor() {\n        return this.addStandardValidation(validator.isHexColor);\n    }\n    isHexadecimal() {\n        return this.addStandardValidation(validator.isHexadecimal);\n    }\n    isHSL() {\n        return this.addStandardValidation(validator.isHSL);\n    }\n    isIBAN() {\n        return this.addStandardValidation(validator.isIBAN);\n    }\n    isIdentityCard(locale) {\n        return this.addStandardValidation(validator.isIdentityCard, locale);\n    }\n    isIMEI(options) {\n        return this.addStandardValidation(validator.isIMEI, options);\n    }\n    isIP(version) {\n        return this.addStandardValidation(validator.isIP, version);\n    }\n    isIPRange() {\n        return this.addStandardValidation(validator.isIPRange);\n    }\n    isISBN(version) {\n        return this.addStandardValidation(validator.isISBN, version);\n    }\n    isISSN(options) {\n        return this.addStandardValidation(validator.isISSN, options);\n    }\n    isISIN() {\n        return this.addStandardValidation(validator.isISIN);\n    }\n    isISO8601(options) {\n        return this.addStandardValidation(validator.isISO8601, options);\n    }\n    isISO31661Alpha2() {\n        return this.addStandardValidation(validator.isISO31661Alpha2);\n    }\n    isISO31661Alpha3() {\n        return this.addStandardValidation(validator.isISO31661Alpha3);\n    }\n    isISRC() {\n        return this.addStandardValidation(validator.isISRC);\n    }\n    isIn(values) {\n        return this.addStandardValidation(validator.isIn, values);\n    }\n    isInt(options) {\n        return this.addStandardValidation(validator.isInt, options);\n    }\n    isJSON(options) {\n        return this.addStandardValidation(validator.isJSON, options);\n    }\n    isJWT() {\n        return this.addStandardValidation(validator.isJWT);\n    }\n    isLatLong(options) {\n        return this.addStandardValidation(validator.isLatLong, options);\n    }\n    isLength(options) {\n        return this.addStandardValidation(validator.isLength, options);\n    }\n    isLocale() {\n        return this.addStandardValidation(validator.isLocale);\n    }\n    isLowercase() {\n        return this.addStandardValidation(validator.isLowercase);\n    }\n    isMagnetURI() {\n        return this.addStandardValidation(validator.isMagnetURI);\n    }\n    isMACAddress(options) {\n        return this.addStandardValidation(validator.isMACAddress, options);\n    }\n    isMD5() {\n        return this.addStandardValidation(validator.isMD5);\n    }\n    isMimeType() {\n        return this.addStandardValidation(validator.isMimeType);\n    }\n    isMobilePhone(locale, options) {\n        return this.addStandardValidation(validator.isMobilePhone, locale, options);\n    }\n    isMongoId() {\n        return this.addStandardValidation(validator.isMongoId);\n    }\n    isMultibyte() {\n        return this.addStandardValidation(validator.isMultibyte);\n    }\n    isNumeric(options) {\n        return this.addStandardValidation(validator.isNumeric, options);\n    }\n    isOctal() {\n        return this.addStandardValidation(validator.isOctal);\n    }\n    isPassportNumber(countryCode) {\n        return this.addStandardValidation(validator.isPassportNumber, countryCode);\n    }\n    isPort() {\n        return this.addStandardValidation(validator.isPort);\n    }\n    isPostalCode(locale) {\n        return this.addStandardValidation(validator.isPostalCode, locale);\n    }\n    isRFC3339() {\n        return this.addStandardValidation(validator.isRFC3339);\n    }\n    isRgbColor(includePercentValues) {\n        return this.addStandardValidation(validator.isRgbColor, includePercentValues);\n    }\n    isSemVer() {\n        return this.addStandardValidation(validator.isSemVer);\n    }\n    isSlug() {\n        return this.addStandardValidation(validator.isSlug);\n    }\n    isSurrogatePair() {\n        return this.addStandardValidation(validator.isSurrogatePair);\n    }\n    isTaxID(locale) {\n        return this.addStandardValidation(validator.isTaxID, locale);\n    }\n    isURL(options) {\n        return this.addStandardValidation(validator.isURL, options);\n    }\n    isUUID(version) {\n        return this.addStandardValidation(validator.isUUID, version);\n    }\n    isUppercase() {\n        return this.addStandardValidation(validator.isUppercase);\n    }\n    isVariableWidth() {\n        return this.addStandardValidation(validator.isVariableWidth);\n    }\n    isWhitelisted(chars) {\n        return this.addStandardValidation(validator.isWhitelisted, chars);\n    }\n    matches(pattern, modifiers) {\n        return this.addStandardValidation(validator.matches, pattern, modifiers);\n    }\n}\nexports.ValidatorsImpl = ValidatorsImpl;\n"]},"metadata":{},"sourceType":"script"}