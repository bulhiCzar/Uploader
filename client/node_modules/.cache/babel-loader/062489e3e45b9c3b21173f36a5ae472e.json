{"ast":null,"code":"var _jsxFileName = \"C:\\\\bulhi\\\\#work\\\\downloadFileServer\\\\client\\\\src\\\\pages\\\\UploadPage.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useHttp } from '../hooks/http.hooks';\nimport modalInfo from '../modules/toast/main';\nimport './UploadPage.css';\n\nfunction UploadPage() {\n  const {\n    loading,\n    error,\n    request,\n    clearError\n  } = useHttp();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [control, setControl] = useState('');\n\n  const selectFile = event => {\n    console.log(event.target.files);\n    setSelectedFiles(event.target.files);\n  };\n\n  useEffect(() => {\n    modalInfo(error);\n    clearError(null);\n    setControl(document.getElementById(\"your-files\")); // control.addEventListener(\"change\", function (event) {\n    //     // Когда происходит изменение элементов управления, значит появились новые файлы\n    //     var i = 0,\n    //         files = control.files,\n    //         len = files.length;\n    //     for (; i < len; i++) {\n    //         console.log(\"Filename: \" + files[i].name);\n    //         console.log(\"Type: \" + files[i].type);\n    //         console.log(\"Size: \" + files[i].size + \" bytes\");\n    //     }\n    // }, false);\n    // var target = document.getElementById(\"your-files\");\n    // target.addEventListener(\"dragover\", function (event) {\n    //     event.preventDefault(); // отменяем действие по умолчанию\n    // }, false);\n    // target.addEventListener(\"drop\", function (event) {\n    //     // отменяем действие по умолчанию\n    //     event.preventDefault();\n    //     var i = 0,\n    //         files = event.dataTransfer.files,\n    //         len = files.length;\n    //     for (; i < len; i++) {\n    //         console.log(\"Filename: \" + files[i].name);\n    //         console.log(\"Type: \" + files[i].type);\n    //         console.log(\"Size: \" + files[i].size + \" bytes\");\n    //     }\n    // }, false);\n  }, [error, clearError]);\n\n  async function uploadSubmit(e) {\n    e.preventDefault();\n    console.log(control);\n    const info = {\n      name: selectedFiles[0].name,\n      lastModified: selectedFiles[0].lastModified,\n      size: selectedFiles[0].size,\n      type: selectedFiles[0].type\n    };\n\n    try {// var form = new FormData();\n      // form.append(\"name\", \"Николай\");\n      // // Создаем форму с несколькими значениями\n      // var form = new FormData();\n      // form.append(\"name\", \"Николай\");\n      // form.append(\"photo\", control.files[0]);\n      // // отправляем через xhr\n      // var xhr = new XMLHttpRequest();\n      // xhr.onload = function () {\n      //     console.log(\"Отправка завершена\");\n      // };\n      // xhr.open(\"post\", \"/entrypoint\", true);\n      // xhr.send(form);\n      // const data = await request('/api/file/test', 'POST', info, { 'Content-Type': 'multipart/form-data' })\n      // console.log(data)\n    } catch (error) {}\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: uploadSubmit,\n    id: \"upload-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    id: \"your-files\",\n    multiple: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"your-files\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    name: \"file\",\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, \"\\u041E\\u0431\\u0440\\u0430\\u0431\\u043E\\u0442\\u0430\\u0442\\u044C\"));\n}\n\nexport default UploadPage;","map":{"version":3,"sources":["C:/bulhi/#work/downloadFileServer/client/src/pages/UploadPage.js"],"names":["React","useEffect","useState","useHttp","modalInfo","UploadPage","loading","error","request","clearError","selectedFiles","setSelectedFiles","control","setControl","selectFile","event","console","log","target","files","document","getElementById","uploadSubmit","e","preventDefault","info","name","lastModified","size","type"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAO,kBAAP;;AAIA,SAASC,UAAT,GAAsB;AAClB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,OAAlB;AAA2BC,IAAAA;AAA3B,MAA0CN,OAAO,EAAvD;AAEA,QAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,EAAD,CAAlD;AAEA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;;AAEA,QAAMY,UAAU,GAAIC,KAAD,IAAW;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,MAAN,CAAaC,KAAzB;AACAR,IAAAA,gBAAgB,CAACI,KAAK,CAACG,MAAN,CAAaC,KAAd,CAAhB;AACH,GAHD;;AAKAlB,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,SAAS,CAACG,KAAD,CAAT;AACAE,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEAI,IAAAA,UAAU,CAACO,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAD,CAAV,CAJY,CAKZ;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKH,GAvCQ,EAuCN,CAACd,KAAD,EAAQE,UAAR,CAvCM,CAAT;;AA0CA,iBAAea,YAAf,CAA4BC,CAA5B,EAA+B;AAC3BA,IAAAA,CAAC,CAACC,cAAF;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACA,UAAMa,IAAI,GAAG;AACTC,MAAAA,IAAI,EAAEhB,aAAa,CAAC,CAAD,CAAb,CAAiBgB,IADd;AAETC,MAAAA,YAAY,EAAEjB,aAAa,CAAC,CAAD,CAAb,CAAiBiB,YAFtB;AAGTC,MAAAA,IAAI,EAAElB,aAAa,CAAC,CAAD,CAAb,CAAiBkB,IAHd;AAITC,MAAAA,IAAI,EAAEnB,aAAa,CAAC,CAAD,CAAb,CAAiBmB;AAJd,KAAb;;AAMA,QAAI,CACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACH,KApBD,CAoBE,OAAOtB,KAAP,EAAc,CAAG;AACtB;;AAGD,sBACI;AAAM,IAAA,QAAQ,EAAEe,YAAhB;AAA8B,IAAA,EAAE,EAAC,kBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,EAAE,EAAC,YAAtB;AAAmC,IAAA,QAAQ,MAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAGI;AAAK,IAAA,EAAE,EAAC,YAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,eAII;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,IAAI,EAAC,MAA3B;AAAkC,IAAA,QAAQ,EAAEhB,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEAJJ,CADJ;AAWH;;AAED,eAAeD,UAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useHttp } from '../hooks/http.hooks'\r\nimport modalInfo from '../modules/toast/main'\r\nimport './UploadPage.css'\r\n\r\n\r\n\r\nfunction UploadPage() {\r\n    const { loading, error, request, clearError } = useHttp()\r\n\r\n    const [selectedFiles, setSelectedFiles] = useState([])\r\n\r\n    const [control, setControl] = useState('')\r\n\r\n    const selectFile = (event) => {\r\n        console.log(event.target.files)\r\n        setSelectedFiles(event.target.files)\r\n    }\r\n\r\n    useEffect(() => {\r\n        modalInfo(error)\r\n        clearError(null)\r\n\r\n        setControl(document.getElementById(\"your-files\"))\r\n        // control.addEventListener(\"change\", function (event) {\r\n        //     // Когда происходит изменение элементов управления, значит появились новые файлы\r\n        //     var i = 0,\r\n        //         files = control.files,\r\n        //         len = files.length;\r\n\r\n        //     for (; i < len; i++) {\r\n        //         console.log(\"Filename: \" + files[i].name);\r\n        //         console.log(\"Type: \" + files[i].type);\r\n        //         console.log(\"Size: \" + files[i].size + \" bytes\");\r\n        //     }\r\n\r\n        // }, false);\r\n\r\n        // var target = document.getElementById(\"your-files\");\r\n        // target.addEventListener(\"dragover\", function (event) {\r\n        //     event.preventDefault(); // отменяем действие по умолчанию\r\n        // }, false);\r\n        // target.addEventListener(\"drop\", function (event) {\r\n        //     // отменяем действие по умолчанию\r\n        //     event.preventDefault();\r\n        //     var i = 0,\r\n        //         files = event.dataTransfer.files,\r\n        //         len = files.length;\r\n        //     for (; i < len; i++) {\r\n        //         console.log(\"Filename: \" + files[i].name);\r\n        //         console.log(\"Type: \" + files[i].type);\r\n        //         console.log(\"Size: \" + files[i].size + \" bytes\");\r\n        //     }\r\n        // }, false);\r\n\r\n\r\n\r\n\r\n    }, [error, clearError])\r\n\r\n\r\n    async function uploadSubmit(e) {\r\n        e.preventDefault()\r\n        console.log(control)\r\n        const info = {\r\n            name: selectedFiles[0].name,\r\n            lastModified: selectedFiles[0].lastModified,\r\n            size: selectedFiles[0].size,\r\n            type: selectedFiles[0].type\r\n        }\r\n        try {\r\n            // var form = new FormData();\r\n            // form.append(\"name\", \"Николай\");\r\n\r\n            // // Создаем форму с несколькими значениями\r\n            // var form = new FormData();\r\n            // form.append(\"name\", \"Николай\");\r\n            // form.append(\"photo\", control.files[0]);\r\n\r\n            // // отправляем через xhr\r\n\r\n            // var xhr = new XMLHttpRequest();\r\n            // xhr.onload = function () {\r\n            //     console.log(\"Отправка завершена\");\r\n            // };\r\n            // xhr.open(\"post\", \"/entrypoint\", true);\r\n            // xhr.send(form);\r\n\r\n            // const data = await request('/api/file/test', 'POST', info, { 'Content-Type': 'multipart/form-data' })\r\n            // console.log(data)\r\n        } catch (error) { }\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={uploadSubmit} id=\"upload-container\" >\r\n            <input type=\"file\" id=\"your-files\" multiple />\r\n            <br />\r\n            <div id=\"your-files\"></div>\r\n            <button type=\"submit\" name=\"file\" disabled={loading}>Обработать</button>\r\n\r\n        </form>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default UploadPage"]},"metadata":{},"sourceType":"module"}