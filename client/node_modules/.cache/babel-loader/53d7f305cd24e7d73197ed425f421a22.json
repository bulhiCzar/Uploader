{"ast":null,"code":"import { set } from \"mongoose\";\nimport { useCallback, useState } from \"react\";\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async (url, method = 'GET', body, headers = {\n    'Content-Type': 'application/json;charset=utf-8'\n  }) => {\n    setLoading(true);\n\n    try {\n      if (body) {\n        body = JSON.stringify(body);\n      }\n\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      const data = await response.json(); // console.log(!response.ok)\n\n      if (!response.ok) {\n        setLoading(false);\n        set;\n        return new Error(data.message || 'Что-то пошло не так');\n      }\n\n      setLoading(false);\n      return data;\n    } catch (error) {\n      setLoading(false);\n      setError(error.message);\n      throw error;\n    }\n  }, []);\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  };\n};","map":{"version":3,"sources":["C:/bulhi/#work/downloadFileServer/client/src/hooks/http.hooks.js"],"names":["set","useCallback","useState","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","JSON","stringify","response","fetch","data","json","ok","Error","message","clearError"],"mappings":"AAAA,SAASA,GAAT,QAAoB,UAApB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,OAAO,MAAMC,OAAO,GAAG,MAAM;AACzB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMM,OAAO,GAAGP,WAAW,CAAC,OAAOQ,GAAP,EAAYC,MAAM,GAAG,KAArB,EAA4BC,IAA5B,EAAkCC,OAAO,GAAG;AAAE,oBAAgB;AAAlB,GAA5C,KAAqG;AAC7HP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,QAAI;AACA,UAAIM,IAAJ,EAAU;AACNA,QAAAA,IAAI,GAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP;AACH;;AAED,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,EAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA,IAAV;AAAgBC,QAAAA;AAAhB,OAAN,CAA5B;AACA,YAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CANA,CAQA;;AACA,UAAI,CAACH,QAAQ,CAACI,EAAd,EAAkB;AACdd,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAL,QAAAA,GAAG;AACH,eAAO,IAAIoB,KAAJ,CAAUH,IAAI,CAACI,OAAL,IAAgB,qBAA1B,CAAP;AACH;;AAGDhB,MAAAA,UAAU,CAAC,KAAD,CAAV;AAEA,aAAOY,IAAP;AACH,KAnBD,CAmBE,OAAOX,KAAP,EAAc;AACZD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACD,KAAK,CAACe,OAAP,CAAR;AACA,YAAMf,KAAN;AAEH;AACJ,GA5B0B,EA4BxB,EA5BwB,CAA3B;;AA8BA,QAAMgB,UAAU,GAAG,MAAM;AACrBf,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,GAFD;;AAIA,SAAO;AAAEH,IAAAA,OAAF;AAAWI,IAAAA,OAAX;AAAoBF,IAAAA,KAApB;AAA2BgB,IAAAA;AAA3B,GAAP;AACH,CAvCM","sourcesContent":["import { set } from \"mongoose\"\r\nimport { useCallback, useState } from \"react\"\r\n\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n\r\n    const request = useCallback(async (url, method = 'GET', body, headers = { 'Content-Type': 'application/json;charset=utf-8' }) => {\r\n        setLoading(true)\r\n\r\n        try {\r\n            if (body) {\r\n                body = JSON.stringify(body)\r\n            }\r\n\r\n            const response = await fetch(url, { method, body, headers })\r\n            const data = await response.json()\r\n\r\n            // console.log(!response.ok)\r\n            if (!response.ok) {\r\n                setLoading(false)\r\n                set\r\n                return new Error(data.message || 'Что-то пошло не так')\r\n            }\r\n            \r\n\r\n            setLoading(false)\r\n\r\n            return data\r\n        } catch (error) {\r\n            setLoading(false)\r\n            setError(error.message)\r\n            throw error\r\n\r\n        }\r\n    }, [])\r\n\r\n    const clearError = () => {\r\n        setError(null)\r\n    }\r\n\r\n    return { loading, request, error, clearError }\r\n}"]},"metadata":{},"sourceType":"module"}