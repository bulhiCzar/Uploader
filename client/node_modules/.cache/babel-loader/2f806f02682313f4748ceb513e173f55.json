{"ast":null,"code":"var _jsxFileName = \"C:\\\\bulhi\\\\#work\\\\downloadFileServer\\\\client\\\\src\\\\pages\\\\UploadPage.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useAuth } from '../hooks/auth.hooks';\nimport { useHttp } from '../hooks/http.hooks';\nimport modalInfo from '../modules/toast/main';\nimport './UploadPage.css';\n\nfunction UploadPage() {\n  const {\n    error,\n    request,\n    clearError\n  } = useHttp();\n  const [image, setImage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [file, setFile] = useState(null);\n  const {\n    token,\n    login,\n    logout,\n    userId\n  } = useAuth();\n\n  const uploadImage = async e => {\n    e.preventDefault();\n    console.log(e.target.elements.buffer);\n    const files = e.target.elements.buffer.file;\n    const data = new FormData();\n    data.append('file', files[0]);\n    data.append('upload_preset', 'darwin'); // setLoading(true)\n\n    console.log(files);\n    console.log(data); // // const res = await fetch('api/file/upload', { method: 'POST', body: data })\n    // // const res = await request('api/file/upload', 'POST', data, {token})\n\n    const res = await fetch('api/file/test', {\n      method: 'POST',\n      body: data,\n      headers: {\n        'enctype': 'multipart/form-data'\n      }\n    });\n    modalInfo(res);\n  };\n\n  useEffect(() => {}, []);\n  var totalsizeOfUploadFiles = 0;\n\n  function getFileSizeandName(input) {\n    var select = $('#uploadTable');\n\n    for (var i = 0; i < input.files.length; i++) {\n      var filesizeInBytes = input.files[i].size;\n      var filesizeInMB = (filesizeInBytes / (1024 * 1024)).toFixed(2);\n      var filename = input.files[i].name; //alert(\"File name is : \"+filename+\" || size : \"+filesizeInMB+\" MB || size : \"+filesizeInBytes+\" Bytes\");\n\n      if (i <= 4) {\n        $('#filetd' + i + '').text(filename);\n        $('#filesizetd' + i + '').text(filesizeInMB);\n      } else if (i > 4) select.append($('<tr id=tr' + i + '><td id=filetd' + i + '>' + filename + '</td><td id=filesizetd' + i + '>' + filesizeInMB + '</td></tr>'));\n\n      totalsizeOfUploadFiles += parseFloat(filesizeInMB);\n      $('#totalsize').text(totalsizeOfUploadFiles.toFixed(2) + \" MB\");\n      if (i == 0) $('#filecount').text(\"1file\");else {\n        var no = parseInt(i) + 1;\n        $('#filecount').text(no + \"files\");\n      }\n    }\n  }\n\n  function CloseAndRefresh() {\n    opener.location.reload(true);\n    self.close();\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: uploadImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, \"\\u0424\\u0430\\u0439\\u043B\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 36\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    name: \"picture\",\n    accept: \"image/*\",\n    multiple: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 79\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 85\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Send\",\n    height: \"30px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  })));\n}\n\nexport default UploadPage;","map":{"version":3,"sources":["C:/bulhi/#work/downloadFileServer/client/src/pages/UploadPage.js"],"names":["React","useEffect","useState","useAuth","useHttp","modalInfo","UploadPage","error","request","clearError","image","setImage","loading","setLoading","file","setFile","token","login","logout","userId","uploadImage","e","preventDefault","console","log","target","elements","buffer","files","data","FormData","append","res","fetch","method","body","headers","totalsizeOfUploadFiles","getFileSizeandName","input","select","$","i","length","filesizeInBytes","size","filesizeInMB","toFixed","filename","name","text","parseFloat","no","parseInt","CloseAndRefresh","opener","location","reload","self","close"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useAuth } from '../hooks/auth.hooks'\r\nimport { useHttp } from '../hooks/http.hooks'\r\nimport modalInfo from '../modules/toast/main'\r\nimport './UploadPage.css'\r\n\r\n\r\nfunction UploadPage() {\r\n    const { error, request, clearError } = useHttp()\r\n    const [image, setImage] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [file, setFile] = useState(null)\r\n\r\n    const { token, login, logout, userId } = useAuth()\r\n\r\n    const uploadImage = async e => {\r\n        e.preventDefault()\r\n        console.log(e.target.elements.buffer)\r\n        const files = e.target.elements.buffer.file\r\n        const data = new FormData()\r\n        data.append('file', files[0])\r\n        data.append('upload_preset', 'darwin')\r\n        // setLoading(true)\r\n        console.log(files)\r\n\r\n        console.log(data)\r\n        // // const res = await fetch('api/file/upload', { method: 'POST', body: data })\r\n        // // const res = await request('api/file/upload', 'POST', data, {token})\r\n        const res = await fetch('api/file/test', { method: 'POST', body: data, headers: { 'enctype': 'multipart/form-data' } })\r\n\r\n\r\n\r\n\r\n        modalInfo(res)\r\n\r\n    }\r\n    useEffect(() => {\r\n\r\n    }, [])\r\n\r\n\r\n    var totalsizeOfUploadFiles = 0;\r\n       function getFileSizeandName(input)\r\n       {\r\n           var select = $('#uploadTable');\r\n           for(var i =0; i<input.files.length; i++)\r\n           {           \r\n               var filesizeInBytes = input.files[i].size;\r\n               var filesizeInMB = (filesizeInBytes / (1024*1024)).toFixed(2);\r\n               var filename = input.files[i].name;\r\n               //alert(\"File name is : \"+filename+\" || size : \"+filesizeInMB+\" MB || size : \"+filesizeInBytes+\" Bytes\");\r\n               if(i<=4)\r\n               {               \r\n                   $('#filetd'+i+'').text(filename);\r\n                   $('#filesizetd'+i+'').text(filesizeInMB);\r\n               }\r\n               else if(i>4)\r\n                   select.append($('<tr id=tr'+i+'><td id=filetd'+i+'>'+filename+'</td><td id=filesizetd'+i+'>'+filesizeInMB+'</td></tr>'));\r\n               totalsizeOfUploadFiles += parseFloat(filesizeInMB);\r\n               $('#totalsize').text(totalsizeOfUploadFiles.toFixed(2)+\" MB\");\r\n               if(i==0)\r\n                   $('#filecount').text(\"1file\");\r\n               else\r\n               {\r\n                   var no = parseInt(i) + 1;\r\n                   $('#filecount').text(no+\"files\");\r\n               }                       \r\n           }           \r\n       }\r\n\r\n       function CloseAndRefresh() \r\n       {\r\n           opener.location.reload(true);\r\n           self.close();\r\n       }       \r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {/* <input name=\"file\" type=\"file\"\r\n                class=\"file-upload\" data-cloudinary-field=\"image_id\"\r\n                data-form-data=\"{ 'transformation': {'crop':'limit','tags':'samples','width':3000,'height':2000}}\" />\r\n            <hr /><hr /><hr /><hr /> */}\r\n            {/* <h1>Upload Image</h1>\r\n            <input\r\n                type=\"file\"\r\n                name=\"file\"\r\n                placeholder=\"Upload an image\"\r\n                onChange={uploadImage}\r\n            />\r\n            {loading ? (\r\n                <h3>Loading...</h3>\r\n            ) : (\r\n                    <img src={image} style={{ width: '300px' }} />\r\n                )} */}\r\n\r\n            <form onSubmit={uploadImage}>\r\n                <label>Файл</label><br />\r\n                <input type=\"file\" name=\"picture\" accept=\"image/*\" multiple /><br /><br />\r\n                <input type=\"submit\" value=\"Send\" height=\"30px\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default UploadPage"]},"metadata":{},"sourceType":"module"}